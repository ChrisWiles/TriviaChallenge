{"version":3,"sources":["serviceWorker.js","components/CircularProgress.js","components/Layout/DrawerMenu.js","components/Layout/Layout.js","components/PageNotFound.js","components/Route.js","App.js","components/ErrorBoundary.js","redux/reducers/index.js","redux/index.js","theme.js","index.js","redux/reducers/trivia.js","redux/reducers/quiz.js","hooks/useHistoryHandler.js","hooks/useLocalStorage.js","hooks/useTriviaAPI.js","hooks/index.js"],"names":["Boolean","window","location","hostname","match","StyledCircularProgress","styled","CircularProgress","CircularProgressWrapper","size","thickness","Item","primary","secondary","Icon","icon","open","pathname","useLocation","url","toLowerCase","Tooltip","title","ListItem","button","component","Link","selected","to","ListItemIcon","ListItemText","DrawerMenu","List","HomeIcon","AccessTimeIcon","ListIcon","useStyles","makeStyles","theme","root","display","backgroundColor","minHeight","height","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","padding","mixins","content","flexGrow","Layout","children","classes","useTheme","useState","setOpen","handleDrawerOpen","useCallback","handleDrawerClose","className","AppBar","clsx","position","Toolbar","IconButton","aria-label","color","edge","onClick","Typography","noWrap","variant","Drawer","paper","direction","Divider","Grid","alignContent","container","justify","item","md","xs","veryLarge","fontSize","lineHeight","textAlign","PageNotFound","RouteWrapper","rest","useEffect","document","Home","React","lazy","Quiz","Result","App","quiz","useSelector","state","fetchNewQuestions","hooks","options","fallback","Route","exact","path","ErrorBoundary","hasError","message","error","this","setState","sm","align","gutterBottom","props","Component","reducer","trivia","store","configureStore","devTools","process","createMuiTheme","palette","main","red","A400","background","default","element","ThemeProvider","CssBaseline","querySelector","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","codes","decodeEntities","encodedString","textArea","createElement","innerHTML","value","slice","createSlice","name","initialState","categories","questions","total","seenAll","loading","reducers","fetchRequest","fetchCategoriesSucess","action","payload","map","String","id","fetchQuerySucess","response_code","results","result","question","correct_answer","incorrect_answers","length","fetchTokenSucess","fetchFailure","actions","index","selectedAnswers","finished","amount","category","difficulty","type","next","back","selectAnswer","answer","submit","setOptions","reset","useHistoryHandler","history","useHistory","push","useLocalStorage","key","initialValue","setError","localStorage","getItem","JSON","parse","err","console","storedValue","setStoredValue","setValue","valueToStore","Function","setItem","stringify","sucess","noResults","invalid","noSessionFound","noQuestionsLeft","fetchAsync","a","fetch","response","json","useTriviaAPI","dispatch","useDispatch","token","setToken","fetchToken","trivaActions","res","fetchCategories","trivia_categories","fetchQuery","query","includes"],"mappings":"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","file":"static/js/main.98dd4ae7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst StyledCircularProgress = styled(CircularProgress)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\n/**\n * Loading spinner that fills the remaining vertical space\n * https://material-ui.com/api/circular-progress/#circularprogress-api\n */\nfunction CircularProgressWrapper({ size = 180, thickness = 3.6 }) {\n  return <StyledCircularProgress size={size} thickness={thickness} />;\n}\n\nCircularProgressWrapper.propTypes = {\n  /**\n   * The size of the circle.\n   */\n  size: PropTypes.number,\n  /**\n   * The thickness of the circle.\n   */\n  thickness: PropTypes.number,\n};\n\nexport default CircularProgressWrapper;\n","import { Link, useLocation } from 'react-router-dom';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\n// import HistoryIcon from '@material-ui/icons/History';\nimport HomeIcon from '@material-ui/icons/Home';\nimport List from '@material-ui/core/List';\nimport ListIcon from '@material-ui/icons/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n// eslint-disable-next-line react/prop-types\nfunction Item({ primary = '', secondary = '', icon: Icon, open = false }) {\n  const { pathname } = useLocation();\n  const url = `/TriviaChallenge/${primary.toLowerCase()}`;\n\n  return (\n    <Tooltip title={open ? '' : primary}>\n      <ListItem button component={Link} selected={pathname === url} to={url}>\n        <ListItemIcon>\n          <Icon />\n        </ListItemIcon>\n        <ListItemText primary={primary} secondary={secondary} />\n      </ListItem>\n    </Tooltip>\n  );\n}\n\nfunction DrawerMenu({ open = false }) {\n  return (\n    <List>\n      <Item icon={HomeIcon} open={open} primary=\"Home\" />\n      <Item icon={AccessTimeIcon} open={open} primary=\"Quiz\" />\n      <Item icon={ListIcon} open={open} primary=\"Results\" />\n      {/* <Item icon={HistoryIcon} open={open} primary=\"Statistics\" /> */}\n    </List>\n  );\n}\n\nDrawerMenu.propTypes = {\n  open: PropTypes.bool.isRequired,\n};\n\nexport default DrawerMenu;\n","import { makeStyles, useTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useState } from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport clsx from 'clsx';\n\nimport DrawerMenu from './DrawerMenu';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    backgroundColor: '#f5f5f5',\n    minHeight: '100vh',\n    height: '100%',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction Layout({ children }) {\n  const classes = useStyles();\n  const theme = useTheme();\n  // Move to redux?\n  const [open, setOpen] = useState(false);\n\n  const handleDrawerOpen = useCallback(() => {\n    setOpen(true);\n  }, []);\n\n  const handleDrawerClose = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <AppBar\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n        position=\"fixed\"\n      >\n        <Toolbar>\n          <IconButton\n            aria-label=\"open drawer\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}\n            color=\"inherit\"\n            edge=\"start\"\n            onClick={handleDrawerOpen}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography noWrap variant=\"h6\">\n            Trivia Challenge!\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        variant=\"permanent\"\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <DrawerMenu open={open} />\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Grid alignContent=\"center\" container justify=\"center\">\n          <Grid item md={6} xs={12}>\n            {children}\n          </Grid>\n        </Grid>\n      </main>\n    </div>\n  );\n}\n\nLayout.propTypes = {\n  children: PropTypes.any,\n};\n\nexport default Layout;\n","import { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n  veryLarge: {\n    fontSize: 70,\n    lineHeight: 0,\n  },\n  container: {\n    height: '100%',\n  },\n  item: {\n    textAlign: 'center',\n  },\n});\n\nfunction PageNotFound() {\n  const classes = useStyles();\n\n  return (\n    <Grid alignItems=\"center\" className={classes.container} container justify=\"center\">\n      <Grid className={classes.item} item>\n        <h1 className={classes.veryLarge}>404</h1>\n        <h2>Page Not Found</h2>\n        <p>Oops! We can't seem to find the page you're looking for</p>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default PageNotFound;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\n\nfunction RouteWrapper({ title = '', ...rest }) {\n  /**\n   * Set document title when title changes\n   */\n  useEffect(() => {\n    if (title) {\n      document.title = title;\n    }\n  }, [title]);\n\n  return <Route {...rest} />;\n}\n\nRouteWrapper.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default RouteWrapper;\n","import { BrowserRouter as Router, Switch } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport React, { Suspense } from 'react';\n\nimport * as hooks from './hooks';\nimport CircularProgress from './components/CircularProgress';\nimport Layout from './components/Layout/Layout';\nimport PageNotFound from './components/PageNotFound';\nimport Route from './components/Route';\n\n/**\n * Route-based code-splitting, I would of used something like next.js but this project was already set up with CRA\n * A component created using React.lazy() only gets loaded when it needs to be rendered.\n * https://reactjs.org/docs/code-splitting.html\n */\nconst Home = React.lazy(() => import('./screens/home'));\nconst Quiz = React.lazy(() => import('./screens/Quiz'));\nconst Result = React.lazy(() => import('./screens/Result'));\n// const Statistics = React.lazy(() => import('./screens/Statistics'));\n\nfunction App() {\n  const quiz = useSelector(state => state.quiz);\n  const { fetchNewQuestions } = hooks.useTriviaAPI(quiz.options);\n\n  return (\n    <Suspense fallback={<CircularProgress />}>\n      <Router>\n        <Layout>\n          {/* A <Switch> looks through all its children <Route>\n            elements and renders the first one whose path\n            matches the current URL. Use a <Switch> any time\n            you have multiple routes, but you want only one\n            of them to render at a time\n         */}\n          <Switch>\n            <Route exact path=\"/TriviaChallenge\" title=\"Home\">\n              <Home />\n            </Route>\n            <Route exact path=\"/TriviaChallenge/home\" title=\"Home\">\n              <Home />\n            </Route>\n            <Route path=\"/TriviaChallenge/quiz\" title=\"Quiz\">\n              <Quiz />\n            </Route>\n            <Route path=\"/TriviaChallenge/results\" title=\"Results\">\n              <Result fetchNewQuestions={fetchNewQuestions} />\n            </Route>\n            {/* <Route path=\"/TriviaChallenge/statistics\" title=\"Statistics\">\n              <Statistics />\n            </Route> */}\n            <Route exact path=\"/TriviaChallenge/404\" title=\"Page Not Found\">\n              <PageNotFound />\n            </Route>\n            <Route path=\"/*\" title=\"Page Not Found\">\n              <PageNotFound />\n            </Route>\n            <Route exact path=\"/\" title=\"Home\">\n              <Home />\n            </Route>\n          </Switch>\n        </Layout>\n      </Router>\n    </Suspense>\n  );\n}\n\nexport default App;\n","import Grid from '@material-ui/core/Grid';\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nclass ErrorBoundary extends React.Component {\n  state = {\n    hasError: false,\n    message: '',\n  };\n\n  static getDerivedStateFromError() {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error /* info */) {\n    // Log error to API\n    this.setState({ message: error.message });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Grid alignItems=\"center\" container justify=\"center\">\n          <Grid item sm={12} xs={10}>\n            <Typography align=\"center\" gutterBottom variant=\"h5\">\n              Oops something went wrong please try again\n            </Typography>\n            <Typography align=\"center\" gutterBottom variant=\"body2\">\n              {`Error: ${this.state.message}`}\n            </Typography>\n          </Grid>\n        </Grid>\n      );\n    }\n\n    // eslint-disable-next-line react/prop-types\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport quiz from './quiz';\nimport trivia from './trivia';\n\nconst reducer = {\n  trivia,\n  quiz,\n};\n\n// The store now has redux-thunk added and the Redux DevTools Extension is turned on\nconst store = configureStore({\n  reducer,\n  // The Redux DevTools Extension is disabled for production\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nexport default store;\n","import store from './reducers';\n\nexport default store;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import { Provider } from 'react-redux';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport store from './redux';\nimport theme from './theme';\n\nconst element = (\n  <ErrorBoundary>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </ErrorBoundary>\n);\n\nconst container = document.querySelector('#root');\n\nReactDOM.render(element, container);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createSlice } from '@reduxjs/toolkit';\n\n// Code 0: Success Returned results successfully.\n// Code 1: No Results Could not return results. The API doesn't have enough questions for your query. (Ex. Asking for 50 Questions in a Category that only has 20.)\n// Code 2: Invalid Parameter Contains an invalid parameter. Arguements passed in aren't valid. (Ex. Amount = Five)\n// Code 3: Token Not Found Session Token does not exist.\n// Code 4: Token Empty Session Token has returned all possible questions for the specified query. Resetting the Token is necessary.\nconst codes = {\n  sucess: 0,\n  noResults: 1,\n  invalid: 2,\n  noSessionFound: 3,\n  noQuestionsLeft: 4,\n};\n\nconst initialState = {\n  categories: [\n    /* {name: '', value: '' } */\n  ],\n  questions: [],\n  total: 0,\n  seenAll: false,\n  loading: true,\n  error: '',\n};\n\n// https://stackoverflow.com/questions/1147359/how-to-decode-html-entities-using-jquery\nfunction decodeEntities(encodedString) {\n  const textArea = document.createElement('textarea');\n  textArea.innerHTML = encodedString;\n  return textArea.value;\n}\n\n// Automatically generates action creators and action types that correspond to the reducers and state.\n// createSlice wraps your function with produce from the Immer library.\nconst slice = createSlice({\n  name: 'trivia',\n  initialState,\n  reducers: {\n    fetchRequest(state) {\n      state.loading = true;\n    },\n    fetchCategoriesSucess(state, action) {\n      state.categories = action.payload.map(item => ({ name: item.name, value: String(item.id) }));\n    },\n    fetchQuerySucess(state, action) {\n      if (action.payload.response_code === codes.sucess) {\n        state.seenAll = false;\n        state.loading = false;\n        state.questions = action.payload.results.map(result => {\n          result.question = decodeEntities(result.question);\n          result.correct_answer = decodeEntities(result.correct_answer);\n          result.incorrect_answers = result.incorrect_answers.map(decodeEntities);\n          return result;\n        });\n        state.total = action.payload.results.length;\n      } else if (action.payload.response_code === codes.noQuestionsLeft) {\n        state.seenAll = true;\n        state.questions = [];\n        state.total = 0;\n      } else {\n        state.seenAll = false;\n        state.questions = [];\n        state.total = 0;\n      }\n    },\n    fetchTokenSucess(state) {\n      state.error = '';\n      state.loading = false;\n    },\n    fetchFailure(state, action) {\n      state.error = action.payload;\n      state.loading = false;\n    },\n  },\n});\n\nexport const {\n  fetchQuerySucess,\n  fetchTokenSucess,\n  fetchFailure,\n  fetchRequest,\n  fetchCategoriesSucess,\n} = slice.actions;\n\nexport default slice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  index: 0,\n  selectedAnswers: {\n    // [question]: answer\n  },\n  finished: false,\n  options: {\n    amount: 10,\n    category: '',\n    difficulty: '',\n    type: '',\n  },\n};\n\n// Automatically generates action creators and action types that correspond to the reducers and state.\n// createSlice wraps your function with produce from the Immer library.\nconst slice = createSlice({\n  name: 'quiz',\n  initialState,\n  reducers: {\n    next(state) {\n      state.index += 1;\n    },\n    back(state) {\n      state.index -= 1;\n    },\n    selectAnswer(state, action) {\n      state.selectedAnswers[action.payload.question] = action.payload.answer;\n    },\n    submit(state) {\n      state.finished = true;\n    },\n    setOptions(state, action) {\n      state.options = action.payload;\n    },\n    reset() {\n      return initialState;\n    },\n  },\n});\n\nexport const { next, back, selectAnswer, submit, reset, setOptions } = slice.actions;\n\nexport default slice.reducer;\n","import { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nfunction useHistoryHandler() {\n  const history = useHistory();\n\n  const handleHistoryChange = useCallback(\n    (url = '') => () => history.push(`/TriviaChallenge${url}`),\n    [history]\n  );\n\n  return handleHistoryChange;\n}\n\nexport default useHistoryHandler;\n","import { useCallback, useState } from 'react';\n\n/**\n * @param key - Unique key for localStorage\n * @param initialValue\n * @returns [storedValue, setValue, error]\n */\nfunction useLocalStorage(key = '', initialValue) {\n  const [error, setError] = useState(null);\n\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (err) {\n      setError(err);\n      console.error(err);\n      return initialValue;\n    }\n  });\n\n  const setValue = useCallback(\n    value => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore = value instanceof Function ? value(storedValue) : value;\n        setStoredValue(valueToStore);\n\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (err) {\n        setError(err);\n        console.error(err);\n      }\n    },\n    [key, storedValue]\n  );\n\n  return [storedValue, setValue, error];\n}\n\nexport default useLocalStorage;\n","// When making API request use the token\n// DOCS https://opentdb.com/api_config.php\n\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as trivaActions from '../redux/reducers/trivia';\nimport useLocalStorage from './useLocalStorage';\n\nconst codes = {\n  sucess: 0,\n  noResults: 1,\n  invalid: 2,\n  noSessionFound: 3,\n  noQuestionsLeft: 4, // Handle this case\n};\n\nasync function fetchAsync(url = '') {\n  const response = await fetch(url);\n  return response.json();\n}\n\n/**\n * A opentdb API hook, simplifies the API\n * Handles tokens, local storage, queries, and errors\n * Only 1 Category can be requested per API Call. To get questions from any category, don't specify a category.\n * A Maximum of 50 Questions can be retrieved per call.\n * https://opentdb.com/api_config.php\n * @param type\n * @returns {array} [ results = [], seenAll = false,  error = '' ]\n */\nfunction useTriviaAPI({ type = '', difficulty = '', amount = 1, category = '' }) {\n  const dispatch = useDispatch();\n  const trivia = useSelector(state => state.trivia);\n  // Session Tokens will be deleted after 6 hours of inactivity.\n  const [token, setToken] = useLocalStorage('__opentdbToken');\n\n  /**\n   * Fetch token and save to local storage\n   */\n  const fetchToken = useCallback(async () => {\n    try {\n      dispatch(trivaActions.fetchRequest());\n      const res = await fetchAsync(`https://opentdb.com/api_token.php?command=request`);\n      setToken(res.token);\n    } catch (err) {\n      console.error(err);\n      dispatch(trivaActions.fetchFailure(err));\n    }\n  }, [dispatch, setToken]);\n\n  /**\n   * Fetch categories\n   */\n  const fetchCategories = useCallback(async () => {\n    try {\n      const res = await fetchAsync(`https://opentdb.com/api_category.php`);\n      dispatch(trivaActions.fetchCategoriesSucess(res.trivia_categories));\n    } catch (err) {\n      console.error(err);\n      dispatch(trivaActions.fetchFailure(err));\n    }\n  }, [dispatch]);\n\n  /**\n   * Query the opentdb API\n   */\n  const fetchQuery = useCallback(async () => {\n    let query = `amount=${amount}`;\n    if (type) {\n      query += `&type=${type}`;\n    }\n    if (difficulty) {\n      query += `&difficulty=${difficulty}`;\n    }\n    if (category) {\n      query += `&category=${category}`;\n    }\n    if (token) {\n      query += `&token=${token}`;\n    }\n\n    try {\n      dispatch(trivaActions.fetchRequest());\n      const res = await fetchAsync(`https://opentdb.com/api.php?${query}`);\n      dispatch(trivaActions.fetchQuerySucess(res));\n      // Fetch token if token is invalid or session not found\n      if ([codes.invalid, codes.noSessionFound].includes(res.response_code)) {\n        fetchToken();\n      }\n    } catch (err) {\n      console.error(err);\n      dispatch(trivaActions.fetchFailure(err));\n    }\n  }, [amount, category, difficulty, dispatch, fetchToken, token, type]);\n\n  /**\n   * fetch categories on mount\n   */\n  useEffect(() => void fetchCategories(), [fetchCategories]);\n\n  /**\n   * Fetch query or token, don't setState if not mounted\n   */\n  useEffect(() => {\n    // Check if there is a token in local storage\n    if (token) {\n      fetchQuery();\n    } else {\n      fetchToken();\n    }\n  }, [token, trivia.total, fetchQuery, fetchToken, fetchCategories, amount]);\n\n  return {\n    ...trivia,\n    fetchNewQuestions: fetchQuery,\n  };\n}\n\nexport default useTriviaAPI;\n","import useHistoryHandler from './useHistoryHandler';\nimport useLocalStorage from './useLocalStorage';\nimport useTriviaAPI from './useTriviaAPI';\n\nexport { useLocalStorage, useTriviaAPI, useHistoryHandler };\n"],"sourceRoot":""}