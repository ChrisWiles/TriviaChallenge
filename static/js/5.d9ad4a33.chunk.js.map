{"version":3,"sources":["components/Card.js","../node_modules/@material-ui/core/colors/green.js","../node_modules/@material-ui/core/colors/red.js","screens/Result/QuestionResult.js","screens/Result/Result.js","utils.js","screens/Result/index.js"],"names":["useStyles","makeStyles","root","flexGrow","CardWrapper","children","spacing","classes","className","container","item","xs","raised","Object","defineProperty","exports","value","default","_default","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","theme","formControl","margin","useLabelStyles","correct","color","green","fontWeight","incorrect","red","Label","answer","correct_answer","userAnswer","Typography","QuestionResult","index","trivia","useSelector","state","quiz","questions","incorrect_answers","question","category","selectedAnswers","answers","concat","Card","CardContent","gutterBottom","FormControl","component","FormGroup","map","FormControlLabel","key","control","Checkbox","checked","disabled","disableRipple","label","Results","fetchNewQuestions","handleRoute","hooks","dispatch","useDispatch","resultText","useMemo","correctCount","filter","q","length","utils","handleNewQuiz","useCallback","quizActions","finished","Fragment","variant","Button","fullWidth","onClick","size","Result"],"mappings":"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","file":"static/js/5.d9ad4a33.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nfunction CardWrapper({ children, spacing = 2 }) {\n  const classes = useStyles();\n\n  return (\n    <Grid className={classes.root} container spacing={spacing}>\n      <Grid item xs={12}>\n        <Card className={classes.root} raised>\n          {children}\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n\nCardWrapper.propTypes = {\n  children: PropTypes.any,\n  spacing: PropTypes.number,\n};\n\nexport default CardWrapper;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar green = {\n  50: '#e8f5e9',\n  100: '#c8e6c9',\n  200: '#a5d6a7',\n  300: '#81c784',\n  400: '#66bb6a',\n  500: '#4caf50',\n  600: '#43a047',\n  700: '#388e3c',\n  800: '#2e7d32',\n  900: '#1b5e20',\n  A100: '#b9f6ca',\n  A200: '#69f0ae',\n  A400: '#00e676',\n  A700: '#00c853'\n};\nvar _default = green;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar red = {\n  50: '#ffebee',\n  100: '#ffcdd2',\n  200: '#ef9a9a',\n  300: '#e57373',\n  400: '#ef5350',\n  500: '#f44336',\n  600: '#e53935',\n  700: '#d32f2f',\n  800: '#c62828',\n  900: '#b71c1c',\n  A100: '#ff8a80',\n  A200: '#ff5252',\n  A400: '#ff1744',\n  A700: '#d50000'\n};\nvar _default = red;\nexports.default = _default;","import { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport CardContent from '@material-ui/core/CardContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\n\nimport Card from '../../components/Card';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nconst useLabelStyles = makeStyles(() => ({\n  correct: {\n    color: green[800],\n    fontWeight: 600,\n  },\n  incorrect: {\n    color: red[800],\n    fontWeight: 600,\n  },\n}));\n\n// eslint-disable-next-line react/prop-types\nconst Label = ({ answer, correct_answer, userAnswer }) => {\n  const classes = useLabelStyles();\n\n  if (correct_answer === answer) {\n    return (\n      <Typography className={classes.correct} color=\"textPrimary\">\n        {answer}\n      </Typography>\n    );\n  }\n\n  if (userAnswer === answer) {\n    return (\n      <Typography className={classes.incorrect} color=\"textPrimary\">\n        {answer}\n      </Typography>\n    );\n  }\n\n  return answer;\n};\n\nfunction QuestionResult({ index = 0 }) {\n  const classes = useStyles();\n  const trivia = useSelector(state => state.trivia);\n  const quiz = useSelector(state => state.quiz);\n\n  const { correct_answer, incorrect_answers, question, category } = trivia.questions[index];\n  const userAnswer = quiz.selectedAnswers[question];\n  const answers = incorrect_answers.concat(correct_answer);\n\n  return (\n    <Card spacing={4}>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {`Question #${index + 1} (${userAnswer === correct_answer ? 'Correct' : 'Wrong'})`}\n        </Typography>\n\n        <Typography color=\"textSecondary\" gutterBottom>\n          {`Category: ${category}`}\n        </Typography>\n\n        <Typography color=\"textSecondary\">{question}</Typography>\n\n        <FormControl className={classes.formControl} component=\"fieldset\">\n          <FormGroup>\n            {answers.map(answer => (\n              <FormControlLabel\n                key={answer}\n                control={\n                  <Checkbox checked={userAnswer === answer} disabled disableRipple value={answer} />\n                }\n                label={\n                  <Label answer={answer} correct_answer={correct_answer} userAnswer={userAnswer} />\n                }\n              />\n            ))}\n          </FormGroup>\n        </FormControl>\n      </CardContent>\n    </Card>\n  );\n}\n\nQuestionResult.propTypes = {\n  index: PropTypes.number.isRequired,\n};\n\nexport default QuestionResult;\n","import { useDispatch, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useMemo } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport * as hooks from '../../hooks';\nimport * as quizActions from '../../redux/reducers/quiz';\nimport * as utils from '../../utils';\nimport QuestionResult from './QuestionResult';\n\nfunction Results({ fetchNewQuestions }) {\n  const handleRoute = hooks.useHistoryHandler();\n  const trivia = useSelector(state => state.trivia);\n  const quiz = useSelector(state => state.quiz);\n  const dispatch = useDispatch();\n  const resultText = useMemo(() => utils.getResultsText({ quiz, trivia }), [quiz, trivia]);\n\n  const handleNewQuiz = useCallback(() => {\n    fetchNewQuestions();\n    dispatch(quizActions.reset());\n    handleRoute('/quiz')();\n  }, [dispatch, fetchNewQuestions, handleRoute]);\n\n  if (!quiz.finished) {\n    return (\n      <React.Fragment>\n        <Typography gutterBottom variant=\"h4\">\n          No Results\n        </Typography>\n        <Typography gutterBottom variant=\"h5\">\n          Complete a quiz and come back!\n        </Typography>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Typography gutterBottom variant=\"h4\">\n        Results\n      </Typography>\n\n      <Typography gutterBottom variant=\"h5\">\n        {resultText}\n      </Typography>\n\n      {trivia.questions.map((q, index) => (\n        <QuestionResult key={q.question} index={index} />\n      ))}\n\n      <br />\n\n      <Button color=\"primary\" fullWidth onClick={handleNewQuiz} size=\"large\" variant=\"outlined\">\n        Play again?\n      </Button>\n    </React.Fragment>\n  );\n}\n\nResults.propTypes = {\n  fetchNewQuestions: PropTypes.func.isRequired,\n};\n\nexport default Results;\n","export const getResultsText = ({ trivia = {}, quiz = {} }) => {\n  const checkAnswer = q => quiz.selectedAnswers[q.question] === q.correct_answer;\n  const correctCount = trivia.questions.filter(checkAnswer).length;\n  return `${correctCount} of ${trivia.questions.length} questions were correct`;\n};\n","import Result from './Result';\n\nexport default Result;\n"],"sourceRoot":""}