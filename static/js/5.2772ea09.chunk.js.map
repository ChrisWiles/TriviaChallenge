{"version":3,"sources":["components/Card.js","utils.js","../node_modules/@material-ui/core/colors/green.js","../node_modules/@material-ui/core/colors/red.js","screens/Result/QuestionResult.js","screens/Result/Result.js","screens/Result/index.js"],"names":["useStyles","makeStyles","root","flexGrow","CardWrapper","children","spacing","classes","className","container","item","xs","raised","getResultsText","trivia","quiz","correctCount","questions","filter","q","selectedAnswers","question","correct_answer","length","Object","defineProperty","exports","value","default","_default","50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700","theme","formControl","margin","useLabelStyles","correct","color","green","fontWeight","incorrect","red","Label","answer","userAnswer","Typography","QuestionResult","index","useSelector","state","incorrect_answers","category","answers","concat","Card","CardContent","gutterBottom","FormControl","component","FormGroup","map","FormControlLabel","key","control","Checkbox","checked","disabled","disableRipple","label","Results","resultText","useMemo","utils","finished","Fragment","variant","Result"],"mappings":"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","file":"static/js/5.2772ea09.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nfunction CardWrapper({ children, spacing = 2 }) {\n  const classes = useStyles();\n\n  return (\n    <Grid className={classes.root} container spacing={spacing}>\n      <Grid item xs={12}>\n        <Card className={classes.root} raised>\n          {children}\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n\nCardWrapper.propTypes = {\n  children: PropTypes.any,\n  spacing: PropTypes.number,\n};\n\nexport default CardWrapper;\n","export const getResultsText = ({ trivia = {}, quiz = {} }) => {\n  const checkAnswer = q => quiz.selectedAnswers[q.question] === q.correct_answer;\n  const correctCount = trivia.questions.filter(checkAnswer).length;\n  return `${correctCount} of ${trivia.questions.length} questions were correct`;\n};\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar green = {\n  50: '#e8f5e9',\n  100: '#c8e6c9',\n  200: '#a5d6a7',\n  300: '#81c784',\n  400: '#66bb6a',\n  500: '#4caf50',\n  600: '#43a047',\n  700: '#388e3c',\n  800: '#2e7d32',\n  900: '#1b5e20',\n  A100: '#b9f6ca',\n  A200: '#69f0ae',\n  A400: '#00e676',\n  A700: '#00c853'\n};\nvar _default = green;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar red = {\n  50: '#ffebee',\n  100: '#ffcdd2',\n  200: '#ef9a9a',\n  300: '#e57373',\n  400: '#ef5350',\n  500: '#f44336',\n  600: '#e53935',\n  700: '#d32f2f',\n  800: '#c62828',\n  900: '#b71c1c',\n  A100: '#ff8a80',\n  A200: '#ff5252',\n  A400: '#ff1744',\n  A700: '#d50000'\n};\nvar _default = red;\nexports.default = _default;","import { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport CardContent from '@material-ui/core/CardContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\n\nimport Card from '../../components/Card';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nconst useLabelStyles = makeStyles(() => ({\n  correct: {\n    color: green[800],\n    fontWeight: 600,\n  },\n  incorrect: {\n    color: red[800],\n    fontWeight: 600,\n  },\n}));\n\n// eslint-disable-next-line react/prop-types\nconst Label = ({ answer, correct_answer, userAnswer }) => {\n  const classes = useLabelStyles();\n\n  if (correct_answer === answer) {\n    return (\n      <Typography className={classes.correct} color=\"textPrimary\">\n        {answer}\n      </Typography>\n    );\n  }\n\n  if (userAnswer === answer) {\n    return (\n      <Typography className={classes.incorrect} color=\"textPrimary\">\n        {answer}\n      </Typography>\n    );\n  }\n\n  return answer;\n};\n\nfunction QuestionResult({ index = 0 }) {\n  const classes = useStyles();\n  const trivia = useSelector(state => state.trivia);\n  const quiz = useSelector(state => state.quiz);\n\n  const { correct_answer, incorrect_answers, question, category } = trivia.questions[index];\n  const userAnswer = quiz.selectedAnswers[question];\n  const answers = incorrect_answers.concat(correct_answer);\n\n  return (\n    <Card spacing={4}>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {`Question #${index + 1}`}\n        </Typography>\n\n        <Typography color=\"textSecondary\" gutterBottom>\n          {`Category: ${category}`}\n        </Typography>\n\n        <Typography color=\"textSecondary\">{question}</Typography>\n\n        <FormControl className={classes.formControl} component=\"fieldset\">\n          <FormGroup>\n            {answers.map(answer => (\n              <FormControlLabel\n                key={answer}\n                control={\n                  <Checkbox checked={userAnswer === answer} disabled disableRipple value={answer} />\n                }\n                label={\n                  <Label answer={answer} correct_answer={correct_answer} userAnswer={userAnswer} />\n                }\n              />\n            ))}\n          </FormGroup>\n        </FormControl>\n      </CardContent>\n    </Card>\n  );\n}\n\nQuestionResult.propTypes = {\n  index: PropTypes.number.isRequired,\n};\n\nexport default QuestionResult;\n","import { useSelector } from 'react-redux';\nimport React, { useMemo } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport * as utils from '../../utils';\nimport QuestionResult from './QuestionResult';\n\nfunction Results() {\n  const trivia = useSelector(state => state.trivia);\n  const quiz = useSelector(state => state.quiz);\n  const resultText = useMemo(() => utils.getResultsText({ quiz, trivia }), [quiz, trivia]);\n\n  if (!quiz.finished) {\n    return (\n      <React.Fragment>\n        <Typography gutterBottom variant=\"h4\">\n          No Results\n        </Typography>\n        <Typography gutterBottom variant=\"h5\">\n          Complete a quiz and come back!\n        </Typography>\n      </React.Fragment>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Typography gutterBottom variant=\"h4\">\n        Results\n      </Typography>\n\n      <Typography gutterBottom variant=\"h5\">\n        {resultText}\n      </Typography>\n\n      {trivia.questions.map((q, index) => (\n        <QuestionResult key={q.question} index={index} />\n      ))}\n    </React.Fragment>\n  );\n}\n\nexport default Results;\n","import Result from './Result';\n\nexport default Result;\n"],"sourceRoot":""}