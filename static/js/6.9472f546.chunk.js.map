{"version":3,"sources":["components/Card.js","utils.js","screens/Quiz/Question/LoadingSkeleton.js","screens/Quiz/Question/QuestionSelection.js","screens/Quiz/Question/QuestionsFinished.js","screens/Quiz/Question/SelectOption.js","screens/Quiz/Question/QuizOptions.js","screens/Quiz/Question/Question.js","screens/Quiz/Question/index.js","screens/Quiz/Quiz.js","screens/Quiz/index.js"],"names":["useStyles","makeStyles","root","flexGrow","CardWrapper","children","spacing","classes","className","container","item","xs","raised","getResultsText","trivia","quiz","correctCount","questions","filter","q","selectedAnswers","question","correct_answer","length","LoadingSkeleton","Card","CardContent","Array","fill","map","e","index","Skeleton","key","animation","height","theme","formControl","marginTop","QuestionSelection","dispatch","useDispatch","useSelector","state","incorrect_answers","selectedAnswer","answers","concat","handleChange","useCallback","event","quizActions","answer","target","value","setTimeout","FormControl","component","FormLabel","FormGroup","FormControlLabel","control","Checkbox","checked","onChange","label","actions","float","QuestionsFinished","fetchNewQuestions","handleRoute","hooks","resultText","useMemo","utils","handleStartNewQuiz","Typography","color","gutterBottom","CardActions","Button","onClick","size","autoFocus","SelectOption","helperText","name","menuItems","handleSelect","inputLabel","useRef","useState","labelWidth","setLabelWidth","useEffect","current","offsetWidth","fullWidth","variant","InputLabel","ref","Select","MenuItem","FormHelperText","difficulty","type","QuizOptions","categories","open","setOpen","amount","category","options","setOptions","handleClickOpen","handleClose","handleSave","handleAmountChange","prevState","Fragment","Tooltip","title","IconButton","Dialog","onClose","DialogTitle","DialogContent","Grid","justify","lg","TextField","DialogActions","Question","handleNext","handleBack","noAnswer","triviaItem","deriveData","handleSubmit","count","notFirstQuestion","notLastQuestion","total","isLastQuestion","loading","finished","disabled","Quiz","error"],"mappings":"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","file":"static/js/6.9472f546.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nfunction CardWrapper({ children, spacing = 2 }) {\n  const classes = useStyles();\n\n  return (\n    <Grid className={classes.root} container spacing={spacing}>\n      <Grid item xs={12}>\n        <Card className={classes.root} raised>\n          {children}\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n\nCardWrapper.propTypes = {\n  children: PropTypes.any,\n  spacing: PropTypes.number,\n};\n\nexport default CardWrapper;\n","export const getResultsText = ({ trivia = {}, quiz = {} }) => {\n  const checkAnswer = q => quiz.selectedAnswers[q.question] === q.correct_answer;\n  const correctCount = trivia.questions.filter(checkAnswer).length;\n  return `${correctCount} of ${trivia.questions.length} questions were correct`;\n};\n","import CardContent from '@material-ui/core/CardContent';\nimport React from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nimport Card from '../../../components/Card';\n\nfunction LoadingSkeleton() {\n  return (\n    <Card>\n      <CardContent>\n        {Array(6)\n          .fill()\n          .map((e, index) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <Skeleton key={index} animation=\"wave\" height={60} />\n          ))}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default LoadingSkeleton;\n","import { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport React, { useCallback } from 'react';\n\nimport * as quizActions from '../../../redux/reducers/quiz';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nfunction QuestionSelection() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const trivia = useSelector(state => state.trivia);\n  const quiz = useSelector(state => state.quiz);\n\n  const { correct_answer, incorrect_answers, question } = trivia.questions[quiz.index];\n  const selectedAnswer = quiz.selectedAnswers[question];\n  const answers = incorrect_answers.concat(correct_answer);\n\n  const handleChange = useCallback(\n    event => {\n      dispatch(\n        quizActions.selectAnswer({\n          question,\n          answer: event.target.value,\n        })\n      );\n\n      // Last quiz would submit, prevent out of index\n      if (trivia.questions.length - 1 !== quiz.index) {\n        setTimeout(() => {\n          dispatch(quizActions.next());\n        }, 250);\n      }\n    },\n    [dispatch, question, quiz.index, trivia.questions.length]\n  );\n\n  return (\n    <FormControl className={classes.formControl} component=\"fieldset\">\n      <FormLabel component=\"legend\">Select one</FormLabel>\n      <FormGroup>\n        {answers.map(answer => (\n          <FormControlLabel\n            key={answer}\n            control={\n              <Checkbox\n                checked={selectedAnswer === answer}\n                onChange={handleChange}\n                value={answer}\n              />\n            }\n            label={answer}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n  );\n}\n\nexport default QuestionSelection;\n","import { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useMemo } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport * as hooks from '../../../hooks';\nimport * as quizActions from '../../../redux/reducers/quiz';\nimport * as utils from '../../../utils';\nimport Card from '../../../components/Card';\n\nconst useStyles = makeStyles(() => ({\n  actions: {\n    float: 'right',\n  },\n}));\n\nfunction QuestionsFinished({ fetchNewQuestions }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const handleRoute = hooks.useHistoryHandler();\n  const trivia = useSelector(state => state.trivia);\n  const quiz = useSelector(state => state.quiz);\n  const resultText = useMemo(() => utils.getResultsText({ quiz, trivia }), [quiz, trivia]);\n\n  const handleStartNewQuiz = useCallback(() => {\n    dispatch(quizActions.reset());\n    fetchNewQuestions();\n  }, [dispatch, fetchNewQuestions]);\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          Quiz Completed\n        </Typography>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {resultText}\n        </Typography>\n      </CardContent>\n      <CardActions className={classes.actions}>\n        <Button onClick={handleStartNewQuiz} size=\"small\">\n          Start New Quiz\n        </Button>\n        <Button autoFocus onClick={handleRoute('/results')} size=\"small\">\n          View Results\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nQuestionsFinished.propTypes = {\n  fetchNewQuestions: PropTypes.func.isRequired,\n};\n\nexport default QuestionsFinished;\n","import FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Select from '@material-ui/core/Select';\n\nfunction SelectOption({\n  label = '',\n  helperText = '',\n  name = '',\n  menuItems = [],\n  handleSelect,\n  value = '',\n}) {\n  const inputLabel = useRef(null);\n  const [labelWidth, setLabelWidth] = useState(0);\n\n  /**\n   * Set label width on mount\n   */\n  useEffect(() => {\n    setLabelWidth(inputLabel.current.offsetWidth);\n  }, []);\n\n  return (\n    <FormControl fullWidth variant=\"outlined\">\n      <InputLabel ref={inputLabel}>{label}</InputLabel>\n      <Select labelWidth={labelWidth} onChange={handleSelect} value={value}>\n        <MenuItem value=\"\">\n          <em>{`Any ${name}`}</em>\n        </MenuItem>\n        {menuItems.map(item => (\n          <MenuItem key={item.name} value={item.value}>\n            {item.name}\n          </MenuItem>\n        ))}\n      </Select>\n      <FormHelperText>{helperText}</FormHelperText>\n    </FormControl>\n  );\n}\n\nSelectOption.propTypes = {\n  helperText: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  menuItems: PropTypes.array.isRequired,\n  name: PropTypes.string.isRequired, // category, difficulty, type\n  handleSelect: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default SelectOption;\n","import { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport * as quizActions from '../../../redux/reducers/quiz';\nimport SelectOption from './SelectOption';\n\nconst useStyles = makeStyles(() => ({\n  actions: {\n    float: 'right',\n  },\n}));\n\nconst menuItems = {\n  difficulty: [\n    { name: 'Easy', value: 'easy' },\n    { name: 'Medium', value: 'medium' },\n    { name: 'Hard', value: 'hard' },\n  ],\n  type: [\n    { name: 'Mutiple Choice', value: 'multiple' },\n    { name: 'True / False', value: 'boolean' },\n  ],\n};\n\nfunction QuizOptions() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const quiz = useSelector(state => state.quiz);\n  const { categories = [] } = useSelector(state => state.trivia);\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState({ amount: 10, category: '', difficulty: '', type: '' });\n\n  /**\n   * Update local options\n   */\n  useEffect(() => {\n    setOptions(quiz.options);\n  }, [quiz.options]);\n\n  const handleClickOpen = useCallback(() => {\n    setOpen(true);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    setOpen(false);\n    dispatch(quizActions.setOptions(options));\n  }, [dispatch, options]);\n\n  const handleAmountChange = useCallback(event => {\n    const { value } = event.target;\n    let amount = value;\n    if (value && value < 1) {\n      amount = 1;\n    }\n    if (value > 100) {\n      amount = 100;\n    }\n    setOptions(prevState => ({ ...prevState, amount }));\n  }, []);\n\n  const handleSelect = useCallback(\n    name => event => {\n      setOptions(prevState => ({ ...prevState, [name]: event.target.value }));\n    },\n    []\n  );\n\n  return (\n    <React.Fragment>\n      <Tooltip onClick={handleClickOpen} title=\"Quiz Options\">\n        <IconButton className={classes.actions}>\n          <MoreVertIcon />\n        </IconButton>\n      </Tooltip>\n      <Dialog onClose={handleClose} open={open}>\n        <DialogTitle>Quiz Options</DialogTitle>\n        <DialogContent>\n          <Grid container justify=\"center\" spacing={3}>\n            <Grid item lg={6} xs={12}>\n              <TextField\n                autoFocus\n                fullWidth\n                label=\"Number of Questions\"\n                onChange={handleAmountChange}\n                type=\"number\"\n                value={options.amount}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item lg={6} xs={12}>\n              <SelectOption\n                handleSelect={handleSelect('category')}\n                helperText=\"\"\n                label=\"Select Category\"\n                menuItems={categories}\n                name=\"category\"\n                setOptions={setOptions}\n                value={options.category}\n              />\n            </Grid>\n            <Grid item lg={6} xs={12}>\n              <SelectOption\n                handleSelect={handleSelect('difficulty')}\n                helperText=\"\"\n                label=\"Select Difficulty\"\n                menuItems={menuItems.difficulty}\n                name=\"difficulty\"\n                setOptions={setOptions}\n                value={options.difficulty}\n              />\n            </Grid>\n            <Grid item lg={6} xs={12}>\n              <SelectOption\n                handleSelect={handleSelect('type')}\n                helperText=\"\"\n                label=\"Select Type\"\n                menuItems={menuItems.type}\n                name=\"type\"\n                setOptions={setOptions}\n                value={options.type}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button color=\"primary\" onClick={handleSave}>\n            Start new quiz\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\nexport default QuizOptions;\n","import { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useMemo } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport * as quizActions from '../../../redux/reducers/quiz';\nimport Card from '../../../components/Card';\nimport LoadingSkeleton from './LoadingSkeleton';\nimport QuestionSelection from './QuestionSelection';\nimport QuestionsFinished from './QuestionsFinished';\nimport QuizOptions from './QuizOptions';\n\nconst useStyles = makeStyles(() => ({\n  actions: {\n    float: 'right',\n  },\n}));\n\nconst deriveData = ({ trivia = {}, quiz = {} }) => {\n  let question = '';\n  let category = '';\n  let noAnswer = true;\n\n  if (trivia.questions && trivia.questions.length) {\n    const triviaItem = trivia.questions[quiz.index];\n    question = triviaItem.question;\n    noAnswer = !quiz.selectedAnswers[question];\n    category = triviaItem.category;\n  }\n\n  return {\n    question,\n    category,\n    noAnswer,\n  };\n};\n\nfunction Question({ handleNext, handleBack, fetchNewQuestions }) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const trivia = useSelector(state => state.trivia);\n  const quiz = useSelector(state => state.quiz);\n  const { question, category, noAnswer } = useMemo(() => deriveData({ trivia, quiz }), [\n    trivia,\n    quiz,\n  ]);\n\n  const handleSubmit = useCallback(() => dispatch(quizActions.submit()), [dispatch]);\n\n  const count = quiz.index + 1;\n  const notFirstQuestion = count !== 1;\n  const notLastQuestion = count !== trivia.total;\n  const isLastQuestion = count === trivia.total;\n\n  if (trivia.loading) {\n    return <LoadingSkeleton />;\n  }\n\n  if (quiz.finished) {\n    return <QuestionsFinished fetchNewQuestions={fetchNewQuestions} />;\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <QuizOptions />\n\n        <Typography color=\"textSecondary\" gutterBottom>\n          {`Question #${count}`}\n        </Typography>\n\n        <Typography color=\"textSecondary\" gutterBottom>\n          {`Category: ${category}`}\n        </Typography>\n\n        <Typography color=\"textSecondary\">{question}</Typography>\n\n        <QuestionSelection />\n      </CardContent>\n\n      <CardActions className={classes.actions}>\n        {notFirstQuestion && (\n          <Button onClick={handleBack} size=\"small\">\n            Back\n          </Button>\n        )}\n\n        {notLastQuestion && (\n          <Button disabled={noAnswer} onClick={handleNext} size=\"small\">\n            Next\n          </Button>\n        )}\n\n        {isLastQuestion && (\n          <Button disabled={noAnswer} onClick={handleSubmit} size=\"small\">\n            Submit\n          </Button>\n        )}\n      </CardActions>\n    </Card>\n  );\n}\n\nQuestion.propTypes = {\n  handleNext: PropTypes.func.isRequired,\n  handleBack: PropTypes.func.isRequired,\n  fetchNewQuestions: PropTypes.func.isRequired,\n};\n\nexport default Question;\n","import Question from './Question';\n\nexport default Question;\n","import { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport React, { useCallback } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport * as quizActions from '../../redux/reducers/quiz';\nimport Question from './Question';\n\nfunction Quiz({ fetchNewQuestions }) {\n  const dispatch = useDispatch();\n  const quiz = useSelector(state => state.quiz);\n  const trivia = useSelector(state => state.trivia);\n\n  const count = quiz.index + 1;\n\n  // TODO: Make next back button on the left and right of the quiz\n  const handleNext = useCallback(() => dispatch(quizActions.next()), [dispatch]);\n  const handleBack = useCallback(() => dispatch(quizActions.back()), [dispatch]);\n\n  if (trivia.error) {\n    return <h1>Somthing went wrong...</h1>;\n  }\n\n  return (\n    <React.Fragment>\n      <Typography gutterBottom variant=\"h4\">\n        Quiz\n      </Typography>\n\n      <Typography gutterBottom variant=\"h5\">\n        {`Question ${count} of ${trivia.total}`}\n      </Typography>\n\n      <Question\n        fetchNewQuestions={fetchNewQuestions}\n        handleBack={handleBack}\n        handleNext={handleNext}\n      />\n    </React.Fragment>\n  );\n}\n\nQuiz.propTypes = {\n  fetchNewQuestions: PropTypes.func.isRequired,\n};\n\nexport default Quiz;\n","import Quiz from './Quiz';\n\nexport default Quiz;\n"],"sourceRoot":""}