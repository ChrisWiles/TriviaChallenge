{"version":3,"sources":["components/Card.js","screens/Quiz/Question/LoadingSkeleton.js","screens/Quiz/Question/QuestionSelection.js","screens/Quiz/Question/SelectOption.js","screens/Quiz/Question/QuizOptions.js","screens/Quiz/Question/Question.js","screens/Quiz/Question/index.js","screens/Quiz/Quiz.js","screens/Quiz/index.js"],"names":["useStyles","makeStyles","root","flexGrow","CardWrapper","children","spacing","classes","className","container","item","xs","raised","LoadingSkeleton","Card","CardContent","Array","fill","map","e","index","Skeleton","key","animation","height","theme","formControl","marginTop","QuestionSelection","dispatch","useDispatch","trivia","useSelector","state","quiz","useState","disabled","setDisabled","questions","correct_answer","incorrect_answers","question","selectedAnswer","selectedAnswers","answers","concat","handleChange","useCallback","event","quizActions","answer","target","value","length","setTimeout","FormControl","component","FormLabel","FormGroup","FormControlLabel","control","Checkbox","checked","onChange","label","SelectOption","helperText","name","menuItems","handleSelect","inputLabel","useRef","labelWidth","setLabelWidth","useEffect","current","offsetWidth","fullWidth","variant","InputLabel","ref","Select","MenuItem","FormHelperText","actions","float","difficulty","type","QuizOptions","categories","open","setOpen","amount","category","options","setOptions","handleClickOpen","handleClose","handleSave","handleAmountChange","prevState","Fragment","Tooltip","onClick","title","IconButton","Dialog","maxWidth","onClose","DialogTitle","DialogContent","Grid","justify","lg","TextField","autoFocus","DialogActions","Button","color","Question","handleNext","handleBack","useMemo","noAnswer","triviaItem","deriveData","handleSubmit","count","notFirstQuestion","notLastQuestion","total","isLastQuestion","loading","finished","to","Typography","gutterBottom","CardActions","size","Quiz","error"],"mappings":"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","file":"static/js/6.69162d14.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nfunction CardWrapper({ children, spacing = 2 }) {\n  const classes = useStyles();\n\n  return (\n    <Grid className={classes.root} container spacing={spacing}>\n      <Grid item xs={12}>\n        <Card className={classes.root} raised>\n          {children}\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n\nCardWrapper.propTypes = {\n  children: PropTypes.any,\n  spacing: PropTypes.number,\n};\n\nexport default CardWrapper;\n","import CardContent from '@material-ui/core/CardContent';\nimport React from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nimport Card from '../../../components/Card';\n\nfunction LoadingSkeleton() {\n  return (\n    <Card>\n      <CardContent>\n        {Array(6)\n          .fill()\n          .map((e, index) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <Skeleton key={index} animation=\"wave\" height={60} />\n          ))}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default LoadingSkeleton;\n","import { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport React, { useCallback, useState } from 'react';\n\nimport * as quizActions from '../../../redux/reducers/quiz';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nfunction QuestionSelection() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const trivia = useSelector(state => state.trivia);\n  const quiz = useSelector(state => state.quiz);\n  const [disabled, setDisabled] = useState(false);\n\n  const { correct_answer, incorrect_answers, question } = trivia.questions[quiz.index];\n  const selectedAnswer = quiz.selectedAnswers[question];\n  const answers = incorrect_answers.concat(correct_answer);\n\n  const handleChange = useCallback(\n    event => {\n      // Prevent double clicks, since quizActions.next is async\n      if (!disabled) {\n        setDisabled(true);\n        dispatch(\n          quizActions.selectAnswer({\n            question,\n            answer: event.target.value,\n          })\n        );\n\n        // Last quiz would submit, prevent out of index\n        if (trivia.questions.length - 1 !== quiz.index) {\n          setTimeout(() => {\n            setDisabled(false);\n            dispatch(quizActions.next());\n          }, 250);\n        } else {\n          setDisabled(false);\n        }\n      }\n    },\n    [dispatch, question, quiz.index, trivia.questions.length, disabled]\n  );\n\n  return (\n    <FormControl className={classes.formControl} component=\"fieldset\">\n      <FormLabel component=\"legend\">Select one</FormLabel>\n      <FormGroup>\n        {answers.map(answer => (\n          <FormControlLabel\n            key={answer}\n            control={\n              <Checkbox\n                checked={selectedAnswer === answer}\n                onChange={handleChange}\n                value={answer}\n              />\n            }\n            label={answer}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n  );\n}\n\nexport default QuestionSelection;\n","import FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Select from '@material-ui/core/Select';\n\nfunction SelectOption({\n  label = '',\n  helperText = '',\n  name = '',\n  menuItems = [],\n  handleSelect,\n  value = '',\n}) {\n  const inputLabel = useRef(null);\n  const [labelWidth, setLabelWidth] = useState(0);\n\n  /**\n   * Set label width on mount\n   */\n  useEffect(() => {\n    setLabelWidth(inputLabel.current.offsetWidth);\n  }, []);\n\n  return (\n    <FormControl fullWidth variant=\"outlined\">\n      <InputLabel ref={inputLabel}>{label}</InputLabel>\n      <Select labelWidth={labelWidth} onChange={handleSelect} value={value}>\n        <MenuItem value=\"\">\n          <em>{`Any ${name}`}</em>\n        </MenuItem>\n        {menuItems.map(item => (\n          <MenuItem key={item.name} value={item.value}>\n            {item.name}\n          </MenuItem>\n        ))}\n      </Select>\n      <FormHelperText>{helperText}</FormHelperText>\n    </FormControl>\n  );\n}\n\nSelectOption.propTypes = {\n  helperText: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  menuItems: PropTypes.array.isRequired,\n  name: PropTypes.string.isRequired, // category, difficulty, type\n  handleSelect: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default SelectOption;\n","import { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport * as quizActions from '../../../redux/reducers/quiz';\nimport SelectOption from './SelectOption';\n\nconst useStyles = makeStyles(() => ({\n  actions: {\n    float: 'right',\n  },\n}));\n\nconst menuItems = {\n  difficulty: [\n    { name: 'Easy', value: 'easy' },\n    { name: 'Medium', value: 'medium' },\n    { name: 'Hard', value: 'hard' },\n  ],\n  type: [\n    { name: 'Mutiple Choice', value: 'multiple' },\n    { name: 'True / False', value: 'boolean' },\n  ],\n};\n\nfunction QuizOptions() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const quiz = useSelector(state => state.quiz);\n  const { categories = [] } = useSelector(state => state.trivia);\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState({ amount: 10, category: '', difficulty: '', type: '' });\n\n  /**\n   * Update local options\n   */\n  useEffect(() => {\n    setOptions(quiz.options);\n  }, [quiz.options]);\n\n  const handleClickOpen = useCallback(() => {\n    setOpen(true);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    setOpen(false);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    setOpen(false);\n    dispatch(quizActions.setOptions(options));\n  }, [dispatch, options]);\n\n  const handleAmountChange = useCallback(event => {\n    const { value } = event.target;\n    let amount = value;\n    if (value && value < 1) {\n      amount = 1;\n    }\n    if (value > 100) {\n      amount = 100;\n    }\n    setOptions(prevState => ({ ...prevState, amount }));\n  }, []);\n\n  const handleSelect = useCallback(\n    name => event => {\n      setOptions(prevState => ({ ...prevState, [name]: event.target.value }));\n    },\n    []\n  );\n\n  return (\n    <React.Fragment>\n      <Tooltip onClick={handleClickOpen} title=\"Quiz Options\">\n        <IconButton className={classes.actions}>\n          <MoreVertIcon />\n        </IconButton>\n      </Tooltip>\n      <Dialog fullWidth maxWidth=\"sm\" onClose={handleClose} open={open}>\n        <DialogTitle>Quiz Options</DialogTitle>\n        <DialogContent>\n          <Grid container justify=\"center\" spacing={3}>\n            <Grid item lg={6} xs={12}>\n              <TextField\n                autoFocus\n                fullWidth\n                label=\"Number of Questions\"\n                onChange={handleAmountChange}\n                type=\"number\"\n                value={options.amount}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid item lg={6} xs={12}>\n              <SelectOption\n                handleSelect={handleSelect('category')}\n                helperText=\"\"\n                label=\"Select Category\"\n                menuItems={categories}\n                name=\"category\"\n                setOptions={setOptions}\n                value={options.category}\n              />\n            </Grid>\n            <Grid item lg={6} xs={12}>\n              <SelectOption\n                handleSelect={handleSelect('difficulty')}\n                helperText=\"\"\n                label=\"Select Difficulty\"\n                menuItems={menuItems.difficulty}\n                name=\"difficulty\"\n                setOptions={setOptions}\n                value={options.difficulty}\n              />\n            </Grid>\n            <Grid item lg={6} xs={12}>\n              <SelectOption\n                handleSelect={handleSelect('type')}\n                helperText=\"\"\n                label=\"Select Type\"\n                menuItems={menuItems.type}\n                name=\"type\"\n                setOptions={setOptions}\n                value={options.type}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button color=\"primary\" onClick={handleSave}>\n            Start new quiz\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\nexport default QuizOptions;\n","import { Redirect } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useMemo } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport * as quizActions from '../../../redux/reducers/quiz';\nimport Card from '../../../components/Card';\nimport LoadingSkeleton from './LoadingSkeleton';\nimport QuestionSelection from './QuestionSelection';\nimport QuizOptions from './QuizOptions';\n\nconst useStyles = makeStyles(() => ({\n  actions: {\n    float: 'right',\n  },\n}));\n\nconst deriveData = ({ trivia = {}, quiz = {} }) => {\n  let question = '';\n  let category = '';\n  let noAnswer = true;\n\n  if (trivia.questions && trivia.questions.length) {\n    const triviaItem = trivia.questions[quiz.index];\n    question = triviaItem.question;\n    noAnswer = !quiz.selectedAnswers[question];\n    category = triviaItem.category;\n  }\n\n  return {\n    question,\n    category,\n    noAnswer,\n  };\n};\n\nfunction Question({ handleNext, handleBack }) {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const trivia = useSelector(state => state.trivia);\n  const quiz = useSelector(state => state.quiz);\n  const { question, category, noAnswer } = useMemo(() => deriveData({ trivia, quiz }), [\n    trivia,\n    quiz,\n  ]);\n\n  const handleSubmit = useCallback(() => dispatch(quizActions.submit()), [dispatch]);\n\n  const count = quiz.index + 1;\n  const notFirstQuestion = count !== 1;\n  const notLastQuestion = count !== trivia.total;\n  const isLastQuestion = count === trivia.total;\n\n  if (trivia.loading) {\n    return <LoadingSkeleton />;\n  }\n\n  if (quiz.finished) {\n    return <Redirect to=\"/TriviaChallenge/results\" />;\n  }\n\n  return (\n    <Card>\n      <CardContent>\n        <QuizOptions />\n\n        <Typography color=\"textSecondary\" gutterBottom>\n          {`Question #${count}`}\n        </Typography>\n\n        <Typography color=\"textSecondary\" gutterBottom>\n          {`Category: ${category}`}\n        </Typography>\n\n        <Typography color=\"textSecondary\">{question}</Typography>\n\n        <QuestionSelection />\n      </CardContent>\n\n      <CardActions className={classes.actions}>\n        {notFirstQuestion && (\n          <Button onClick={handleBack} size=\"small\">\n            Back\n          </Button>\n        )}\n\n        {notLastQuestion && (\n          <Button disabled={noAnswer} onClick={handleNext} size=\"small\">\n            Next\n          </Button>\n        )}\n\n        {isLastQuestion && (\n          <Button disabled={noAnswer} onClick={handleSubmit} size=\"small\">\n            Submit\n          </Button>\n        )}\n      </CardActions>\n    </Card>\n  );\n}\n\nQuestion.propTypes = {\n  handleNext: PropTypes.func.isRequired,\n  handleBack: PropTypes.func.isRequired,\n};\n\nexport default Question;\n","import Question from './Question';\n\nexport default Question;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nimport * as quizActions from '../../redux/reducers/quiz';\nimport Question from './Question';\n\nfunction Quiz() {\n  const dispatch = useDispatch();\n  const quiz = useSelector(state => state.quiz);\n  const trivia = useSelector(state => state.trivia);\n\n  const count = quiz.index + 1;\n\n  // TODO: Make next back button on the left and right of the quiz\n  const handleNext = useCallback(() => dispatch(quizActions.next()), [dispatch]);\n  const handleBack = useCallback(() => dispatch(quizActions.back()), [dispatch]);\n\n  if (trivia.error) {\n    return <h1>Somthing went wrong...</h1>;\n  }\n\n  return (\n    <React.Fragment>\n      <Typography gutterBottom variant=\"h4\">\n        Quiz\n      </Typography>\n\n      <Typography gutterBottom variant=\"h5\">\n        {`Question ${count} of ${trivia.total}`}\n      </Typography>\n\n      <Question handleBack={handleBack} handleNext={handleNext} />\n    </React.Fragment>\n  );\n}\n\nexport default Quiz;\n","import Quiz from './Quiz';\n\nexport default Quiz;\n"],"sourceRoot":""}